// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Fs.readFileSync("input/Week1/Day5Input.txt", "utf8");

var arrInput = input.split("\n");

function convertLU(x) {
  return x.replace(/[F|L]/g, "0").replace(/[B|R]/g, "1");
}

function getRowInput(x) {
  return convertLU(x.slice(0, 7));
}

function getColInput(x) {
  return convertLU(x.slice(7));
}

function splitPart(x) {
  return [
          {
            TAG: /* Row */0,
            _0: getRowInput(x)
          },
          {
            TAG: /* Col */1,
            _0: convertLU(x.slice(7))
          }
        ];
}

function calcSeatNum(x, param) {
  var param$1 = Belt_Array.reduce(Belt_Array.map(x.split(""), (function (x) {
              if (Belt_Option.getExn(Belt_Int.fromString(x)) > 0) {
                return /* Upper */1;
              } else {
                return /* Lower */0;
              }
            })), [
        param[0],
        param[1]
      ], (function (param, x) {
          var end = param[1];
          var front = param[0];
          var calc = (end - front | 0) / 2 | 0;
          if (x) {
            return [
                    (front + calc | 0) + 1 | 0,
                    end
                  ];
          } else {
            return [
                    front,
                    (end - calc | 0) - 1 | 0
                  ];
          }
        }));
  var b = param$1[1];
  var a = param$1[0];
  if (a < b) {
    return a;
  } else {
    return b;
  }
}

function getSeat(x) {
  if (x.TAG === /* Row */0) {
    return calcSeatNum(x._0, [
                0,
                127
              ]);
  } else {
    return calcSeatNum(x._0, [
                0,
                7
              ]);
  }
}

function getSeatNumber(param) {
  return [
          getSeat(param[0]),
          getSeat(param[1])
        ];
}

function geId(param) {
  return (param[0] << 3) + param[1] | 0;
}

var resultPart1 = Belt_Array.reduce(Belt_Array.map(arrInput, splitPart), 0, (function (acc, x) {
        var result = geId(getSeatNumber(x));
        if (acc > result) {
          return acc;
        } else {
          return result;
        }
      }));

var resultPart2 = Belt_Array.reduce(Belt_Array.map(arrInput, splitPart), [], (function (acc, x) {
          return acc.concat([getSeatNumber(x)]);
        })).filter(function (param) {
      var row = param[0];
      if (row !== 0) {
        return true;
      } else {
        return row !== 127;
      }
    });

console.log("result : part 1");

console.log(resultPart1);

console.log("result : part 2");

exports.input = input;
exports.arrInput = arrInput;
exports.convertLU = convertLU;
exports.getRowInput = getRowInput;
exports.getColInput = getColInput;
exports.splitPart = splitPart;
exports.calcSeatNum = calcSeatNum;
exports.getSeat = getSeat;
exports.getSeatNumber = getSeatNumber;
exports.geId = geId;
exports.resultPart1 = resultPart1;
exports.resultPart2 = resultPart2;
/* input Not a pure module */
