// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

var input = Fs.readFileSync("input/Week1/Day7Input.sample.txt", "utf8");

function removeStr(x) {
  return x.replace(/bags|bag|[0-9]|\./g, "").trim();
}

var arrInput = input.split("\n");

function splitInfo(x) {
  return Belt_List.fromArray(x.split("contain"));
}

function parseContainInfo(x) {
  var cnt = Belt_Int.fromString(x.trim());
  if (cnt !== undefined) {
    return [
            cnt,
            removeStr(x).trim()
          ];
  } else {
    return [
            0,
            undefined
          ];
  }
}

function getContainBags(x) {
  return Belt_List.getExn(x, 0).split(",").map(parseContainInfo);
}

function getBagCount(_list, _accContainColor) {
  while(true) {
    var accContainColor = _accContainColor;
    var list = _list;
    var newList = list.filter((function(accContainColor){
        return function (param) {
          return !accContainColor.includes(param[0]);
        }
        }(accContainColor)));
    var newAccContainColor = Belt_Array.reduce(newList, accContainColor, (function(accContainColor){
        return function (acc, param) {
          var isContain = Belt_Array.some(param[1], (function (param) {
                  var x = param[1];
                  if (x !== undefined) {
                    return accContainColor.includes(x);
                  } else {
                    return false;
                  }
                }));
          if (isContain) {
            return Belt_Array.concat(acc, [param[0]]);
          } else {
            return acc;
          }
        }
        }(accContainColor)));
    if (accContainColor.length === newAccContainColor.length) {
      return newAccContainColor.length - 1 | 0;
    }
    _accContainColor = newAccContainColor;
    _list = newList;
    continue ;
  };
}

var getBagInfoList = Belt_Array.reduce(arrInput.map(splitInfo), [], (function (acc, x) {
        if (x) {
          return Belt_Array.concat(acc, [[
                        removeStr(x.hd),
                        getContainBags(x.tl)
                      ]]);
        } else {
          return acc;
        }
      }));

console.log("part 2 solution");

function getTargetList(list, target, accTargetList) {
  var containBagName = target[1];
  if (containBagName !== undefined) {
    console.log(Belt_Array.reduce(Belt_Array.map(Belt_Array.keep(list, (function (param) {
                        return containBagName === param[0];
                      })), (function (param) {
                    return param[1];
                  })), accTargetList, (function (acc, x) {
                console.log(Belt_Array.reduce(x, [], (function (acc, x) {
                            console.log(x);
                            return acc;
                          })));
                return acc;
              })));
    return accTargetList;
  } else {
    return accTargetList;
  }
}

console.log(getTargetList(getBagInfoList, [
          1,
          "shiny gold"
        ], []));

exports.input = input;
exports.removeStr = removeStr;
exports.arrInput = arrInput;
exports.splitInfo = splitInfo;
exports.parseContainInfo = parseContainInfo;
exports.getContainBags = getContainBags;
exports.getBagCount = getBagCount;
exports.getBagInfoList = getBagInfoList;
exports.getTargetList = getTargetList;
/* input Not a pure module */
