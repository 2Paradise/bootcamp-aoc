// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Fs.readFileSync("input/Week2/Day4Input.txt", "utf8");

function sumInt(arr) {
  return Belt_Array.reduce(arr, 0, (function (acc, x) {
                return acc + x | 0;
              }));
}

var arrInput = input.split("\n\n");

function splitPassPort(x) {
  return x.replace(/\n/g, " ");
}

function checkPart(x) {
  var passportRe = /(?=.*byr)(?=.*iyr)(?=.*eyr)(?=.*hgt)(?=.*hcl)(?=.*ecl)(?=.*pid)/;
  var match = x.match(passportRe);
  if (match !== null) {
    return x;
  }
  
}

console.log("Day 4 Part 1 ::");

console.log(Belt_Array.keepMap(Belt_Array.map(arrInput, splitPassPort), checkPart).length);

console.log("Day 4 Part 2 ::");

function splitFields(x) {
  return Belt_Array.keepMap(x, (function (x) {
                var match = x.split(":");
                if (match.length !== 2) {
                  return ;
                }
                var k = match[0];
                var v = match[1];
                return [
                        k,
                        v
                      ];
              }));
}

function parseStringToInt(x) {
  var i = Belt_Int.fromString(x);
  if (i !== undefined) {
    return i;
  } else {
    return 0;
  }
}

function rangeType(x, param) {
  var b = param[1];
  var a = param[0];
  return Belt_Option.flatMap(Belt_Option.flatMap(x, (function (param) {
                    return Belt_Int.fromString(param[1]);
                  })), (function (x) {
                if (a <= x && x <= b) {
                  return x;
                }
                
              }));
}

function hex(x) {
  return Belt_Option.flatMap(x, (function (param) {
                var v = param[1];
                if (/^[\#][0-9a-f]{6}$/.test(v)) {
                  return v;
                }
                
              }));
}

function length(x, len) {
  return Belt_Option.flatMap(x, (function (param) {
                var v = param[1];
                if (v.length === len) {
                  return v;
                }
                
              }));
}

function hgt(x) {
  return Belt_Option.flatMap(x, (function (param) {
                var match = param[1].replace(/\d/g, "");
                switch (match) {
                  case "cm" :
                      return Belt_Option.map(rangeType(x, [
                                      150,
                                      193
                                    ]), (function (x) {
                                    return {
                                            TAG: /* Cm */0,
                                            _0: x
                                          };
                                  }));
                  case "in" :
                      return Belt_Option.map(rangeType(x, [
                                      59,
                                      76
                                    ]), (function (x) {
                                    return {
                                            TAG: /* In */1,
                                            _0: x
                                          };
                                  }));
                  default:
                    return ;
                }
              }));
}

function eyeColor(x) {
  return Belt_Option.flatMap(x, (function (param) {
                switch (param[1]) {
                  case "amb" :
                      return "amb";
                  case "blu" :
                      return "blu";
                  case "brn" :
                      return "brn";
                  case "grn" :
                      return "grn";
                  case "gry" :
                      return "gry";
                  case "hzl" :
                      return "hzl";
                  case "oth" :
                      return "oth";
                  default:
                    return ;
                }
              }));
}

var Check = {
  parseStringToInt: parseStringToInt,
  rangeType: rangeType,
  hex: hex,
  length: length,
  hgt: hgt,
  eyeColor: eyeColor
};

function getKeyValue(x, key) {
  return Belt_Array.get(Belt_Array.keep(x, (function (param) {
                    return param[0] === key;
                  })), 0);
}

function parse(x) {
  var byr = rangeType(getKeyValue(x, "byr"), [
        1920,
        2002
      ]);
  var iyr = rangeType(getKeyValue(x, "iyr"), [
        2010,
        2020
      ]);
  var eyr = rangeType(getKeyValue(x, "eyr"), [
        2020,
        2030
      ]);
  var hgt$1 = hgt(getKeyValue(x, "hgt"));
  var hcl = hex(getKeyValue(x, "hcl"));
  var ecl = eyeColor(getKeyValue(x, "ecl"));
  var pid = length(getKeyValue(x, "pid"), 9);
  var cid = Belt_Option.map(getKeyValue(x, "cid"), (function (param) {
          return param[1];
        }));
  if (byr !== undefined && iyr !== undefined && eyr !== undefined && hgt$1 !== undefined && hcl !== undefined && ecl !== undefined && pid !== undefined) {
    return {
            byr: byr,
            iyr: iyr,
            eyr: eyr,
            hgt: hgt$1,
            hcl: hcl,
            ecl: ecl,
            pid: pid,
            cid: cid
          };
  }
  
}

console.log(Belt_Array.keepMap(Belt_Array.map(Belt_Array.map(Belt_Array.keepMap(Belt_Array.map(arrInput, splitPassPort), checkPart), (function (x) {
                    return x.split(" ");
                  })), splitFields), parse).length);

exports.input = input;
exports.sumInt = sumInt;
exports.arrInput = arrInput;
exports.splitPassPort = splitPassPort;
exports.checkPart = checkPart;
exports.splitFields = splitFields;
exports.Check = Check;
exports.getKeyValue = getKeyValue;
exports.parse = parse;
/* input Not a pure module */
