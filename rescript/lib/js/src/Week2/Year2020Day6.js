// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");

var input = Fs.readFileSync("input/Week2/Day6Input.txt", "utf8");

function sumInt(arr) {
  return Belt_Array.reduce(arr, 0, (function (acc, x) {
                return acc + x | 0;
              }));
}

var arrGroup = input.split("\n\n");

function splitCharAt(x) {
  return x.replace(/\n/g, "").split("");
}

function duplArray(x) {
  return Belt_SetString.toArray(Belt_SetString.fromArray(x));
}

function getLength(x) {
  return x.length;
}

var resultPart1 = sumInt(Belt_Array.map(Belt_Array.map(Belt_Array.map(arrGroup, splitCharAt), duplArray), getLength));

console.log("part1 result :: ");

console.log(resultPart1);

function splitMember(x) {
  return x.split("\n");
}

function checkAnser(x) {
  return Belt_Array.reduce(x, Caml_array.get(x, 0), (function (acc, x) {
                var s0 = Belt_SetString.fromArray(acc);
                var s1 = Belt_SetString.fromArray(x);
                return Belt_SetString.toArray(Belt_SetString.intersect(s0, s1));
              }));
}

function checkCommonAnser(x) {
  return checkAnser(Belt_Array.map(x, (function (x) {
                    return x.split("");
                  }))).length;
}

var resultPart2 = sumInt(Belt_Array.map(Belt_Array.map(arrGroup, splitMember), checkCommonAnser));

console.log(resultPart2);

exports.input = input;
exports.sumInt = sumInt;
exports.arrGroup = arrGroup;
exports.splitCharAt = splitCharAt;
exports.duplArray = duplArray;
exports.getLength = getLength;
exports.resultPart1 = resultPart1;
exports.splitMember = splitMember;
exports.checkAnser = checkAnser;
exports.checkCommonAnser = checkCommonAnser;
exports.resultPart2 = resultPart2;
/* input Not a pure module */
