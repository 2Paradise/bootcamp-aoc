// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Fs.readFileSync("input/Week2/Day8Input.txt", "utf8");

var arrInput = input.split("\n");

function parseInitRecord(x) {
  var match = x.split(" ");
  if (match.length !== 2) {
    return ;
  }
  var match$1 = match[0];
  switch (match$1) {
    case "acc" :
        var v = match[1];
        return {
                TAG: /* Acc */0,
                _0: v
              };
    case "jmp" :
        var v$1 = match[1];
        return {
                TAG: /* Jmp */1,
                _0: v$1
              };
    case "nop" :
        var v$2 = match[1];
        return {
                TAG: /* Nop */2,
                _0: v$2
              };
    default:
      return ;
  }
}

function parseOperation(x) {
  var accOperation = x.replace(/\d/g, "");
  var accValue = Belt_Int.fromString(x.replace(/\D/g, ""));
  return [
          accOperation,
          accValue
        ];
}

function runExcute(x, t) {
  var match = parseOperation(x);
  var match$1 = match[0];
  if (match$1 === undefined) {
    return t;
  }
  switch (match$1) {
    case "+" :
        var v = match[1];
        if (v !== undefined) {
          return t + v | 0;
        } else {
          return t;
        }
    case "-" :
        var v$1 = match[1];
        if (v$1 !== undefined) {
          return t - v$1 | 0;
        } else {
          return t;
        }
    default:
      return t;
  }
}

function getExcuteResult(operType, acc, i) {
  switch (operType.TAG | 0) {
    case /* Acc */0 :
        return [
                runExcute(operType._0, acc),
                i + 1 | 0
              ];
    case /* Jmp */1 :
        return [
                acc,
                runExcute(operType._0, i)
              ];
    case /* Nop */2 :
        return [
                acc,
                i + 1 | 0
              ];
    
  }
}

function runPart1Excute(x, _arrRunIndex, _param) {
  while(true) {
    var param = _param;
    var arrRunIndex = _arrRunIndex;
    var i = param[1];
    var acc = param[0];
    if (arrRunIndex.includes(i)) {
      return acc;
    }
    _param = getExcuteResult(Caml_array.get(x, i), acc, i);
    _arrRunIndex = Belt_Array.concat(arrRunIndex, [i]);
    continue ;
  };
}

var arrExcute = Belt_Array.keepMap(Belt_Array.map(arrInput, parseInitRecord), (function (x) {
        return x;
      }));

console.log("Day 8 part1 result :: ");

console.log(runPart1Excute(arrExcute, [], [
          0,
          0
        ]));

var lenExcute = arrExcute.length;

var arrCorruptedIndex = Belt_Array.keepMap(Belt_Array.mapWithIndex(arrExcute, (function (i, x) {
            switch (x.TAG | 0) {
              case /* Acc */0 :
                  return ;
              case /* Jmp */1 :
              case /* Nop */2 :
                  return i;
              
            }
          })), (function (x) {
        return x;
      }));

function swap(x) {
  switch (x.TAG | 0) {
    case /* Acc */0 :
        return x;
    case /* Jmp */1 :
        return {
                TAG: /* Nop */2,
                _0: x._0
              };
    case /* Nop */2 :
        return {
                TAG: /* Jmp */1,
                _0: x._0
              };
    
  }
}

function checkOper(x) {
  switch (x.TAG | 0) {
    case /* Acc */0 :
        return false;
    case /* Jmp */1 :
    case /* Nop */2 :
        return true;
    
  }
}

function runPart2Excute(x, _loopType, _accq, _param, _param$1) {
  while(true) {
    var param = _param;
    var param$1 = _param$1;
    var accq = _accq;
    var loopType = _loopType;
    var i = param$1[1];
    var acc = param$1[0];
    var arrB = param[1];
    var arrA = param[0];
    var isLast = (lenExcute - 1 | 0) === i;
    var isIncluedes = Belt_Array.concat(arrA, arrB).includes(i);
    var isSwap = checkOper(Caml_array.get(x, i));
    if (isLast) {
      return getExcuteResult(Caml_array.get(x, i), acc, i)[0];
    }
    if (loopType) {
      if (isIncluedes) {
        var startIdx = Belt_Array.get(arrB, 0);
        if (startIdx === undefined) {
          return acc;
        }
        _param$1 = getExcuteResult(Caml_array.get(x, startIdx), accq, startIdx);
        _param = [
          Belt_Array.concat(arrA, [startIdx]),
          []
        ];
        _loopType = /* Loop */0;
        continue ;
      }
      _param$1 = getExcuteResult(Caml_array.get(x, i), acc, i);
      _param = [
        arrA,
        Belt_Array.concat(arrB, [i])
      ];
      _loopType = /* TestLoop */1;
      continue ;
    }
    if (isIncluedes) {
      return acc;
    }
    if (isSwap) {
      _param$1 = getExcuteResult(swap(Caml_array.get(x, i)), acc, i);
      _param = [
        arrA,
        Belt_Array.concat(arrB, [i])
      ];
      _accq = acc;
      _loopType = /* TestLoop */1;
      continue ;
    }
    _param$1 = getExcuteResult(Caml_array.get(x, i), acc, i);
    _param = [
      Belt_Array.concat(arrA, [i]),
      arrB
    ];
    _loopType = /* Loop */0;
    continue ;
  };
}

console.log("Day 8 part2 result :: ");

console.log(runPart2Excute(arrExcute, /* Loop */0, 0, [
          [],
          []
        ], [
          0,
          0
        ]));

function runPart3Excute(x, _arrCorruptedIndex, _arrIndex, _param) {
  while(true) {
    var param = _param;
    var arrIndex = _arrIndex;
    var arrCorruptedIndex = _arrCorruptedIndex;
    var i = param[1];
    var acc = param[0];
    var corruptedIndex = Belt_Array.get(arrCorruptedIndex, arrCorruptedIndex.length - 1 | 0);
    var oper = Belt_Option.mapWithDefault(corruptedIndex, Caml_array.get(x, i), (function(i){
        return function (ci) {
          if (ci === i) {
            return swap(Caml_array.get(x, i));
          } else {
            return Caml_array.get(x, i);
          }
        }
        }(i)));
    if ((lenExcute - 1 | 0) === i) {
      console.log("Day 8 part2 - 1 result :: ");
      return getExcuteResult(oper, acc, i)[0];
    }
    if (arrIndex.includes(i)) {
      _param = [
        0,
        0
      ];
      _arrIndex = [];
      _arrCorruptedIndex = Belt_Array.keep(arrCorruptedIndex, (function(corruptedIndex){
          return function (x) {
            return x !== corruptedIndex;
          }
          }(corruptedIndex)));
      continue ;
    }
    _param = getExcuteResult(oper, acc, i);
    _arrIndex = Belt_Array.concat(arrIndex, [i]);
    continue ;
  };
}

console.log(runPart3Excute(arrExcute, arrCorruptedIndex, [], [
          0,
          0
        ]));

exports.input = input;
exports.arrInput = arrInput;
exports.parseInitRecord = parseInitRecord;
exports.parseOperation = parseOperation;
exports.runExcute = runExcute;
exports.getExcuteResult = getExcuteResult;
exports.runPart1Excute = runPart1Excute;
exports.arrExcute = arrExcute;
exports.lenExcute = lenExcute;
exports.arrCorruptedIndex = arrCorruptedIndex;
exports.swap = swap;
exports.checkOper = checkOper;
exports.runPart2Excute = runPart2Excute;
exports.runPart3Excute = runPart3Excute;
/* input Not a pure module */
